# coding: utf-8

"""
    Zips REST API

    My first API  # noqa: E501

    The version of the OpenAPI document: v1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class City(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'city': 'str',
        'loc': 'list[float]',
        'pop': 'float',
        'state': 'str'
    }

    attribute_map = {
        'id': '_id',
        'city': 'city',
        'loc': 'loc',
        'pop': 'pop',
        'state': 'state'
    }

    def __init__(self, id=None, city=None, loc=None, pop=None, state=None, local_vars_configuration=None):  # noqa: E501
        """City - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._city = None
        self._loc = None
        self._pop = None
        self._state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if city is not None:
            self.city = city
        if loc is not None:
            self.loc = loc
        if pop is not None:
            self.pop = pop
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this City.  # noqa: E501

        _id  # noqa: E501

        :return: The id of this City.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this City.

        _id  # noqa: E501

        :param id: The id of this City.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def city(self):
        """Gets the city of this City.  # noqa: E501

        city name  # noqa: E501

        :return: The city of this City.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this City.

        city name  # noqa: E501

        :param city: The city of this City.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def loc(self):
        """Gets the loc of this City.  # noqa: E501

        location  # noqa: E501

        :return: The loc of this City.  # noqa: E501
        :rtype: list[float]
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this City.

        location  # noqa: E501

        :param loc: The loc of this City.  # noqa: E501
        :type: list[float]
        """

        self._loc = loc

    @property
    def pop(self):
        """Gets the pop of this City.  # noqa: E501

        population  # noqa: E501

        :return: The pop of this City.  # noqa: E501
        :rtype: float
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this City.

        population  # noqa: E501

        :param pop: The pop of this City.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                pop is not None and pop < 10):  # noqa: E501
            raise ValueError("Invalid value for `pop`, must be a value greater than or equal to `10`")  # noqa: E501

        self._pop = pop

    @property
    def state(self):
        """Gets the state of this City.  # noqa: E501

        state  # noqa: E501

        :return: The state of this City.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this City.

        state  # noqa: E501

        :param state: The state of this City.  # noqa: E501
        :type: str
        """
        allowed_values = ["MA", "RI", "NH", "ME", "VT", "CT", "NY", "NJ", "PA", "DE", "DC", "MD", "VA", "WV", "NC", "SC", "GA", "FL", "AL", "TN", "MS", "KY", "OH", "IN", "MI", "IA", "WI", "MN", "SD", "ND", "MT", "IL", "MO", "KS", "NE", "LA", "AR", "OK", "TX", "CO", "WY", "ID", "UT", "AZ", "NM", "NV", "CA", "HI", "OR", "WA", "AK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, City):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, City):
            return True

        return self.to_dict() != other.to_dict()
